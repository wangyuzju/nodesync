fs = require 'fs'
url = require 'url'
path = require 'path'
watch = require "watch-project"
jch = require "jch"
params = require 'commander'
remote = require './upload'
fc = require './filechange'
config = require './config'


console.error = (s)->
  console.log("\u001b[1;31m#{s}\u001b[0m")
# used for log messages generated by other program
console.info = (s)->
  console.log "\u001b[36m#{s}\u001b[0m"
# used for log important messages
console.warn = (s)->
  console.log "\u001b[35m#{s}\u001b[0m"





start = (opts)->

  target = path.resolve('.m3dsync_config')

  conf = config.load(target)
  # first running this program, will ask user to input configuration informatin rather than start watching
  if not conf
    return


  for key, value of conf
    opts[key] ?= value


  # check watch target file exists
  if not fs.existsSync opts.path
    console.error "Error: "
    console.log "\tWatching directory '#{ opts.path }' is not Exist!"
    return


  # init local
  console.warn "[Stable Mode Enable]" if opts.stable
  console.log "Local : >>>"
  console.log "\tWatching   ... '#{opts.path}'"
  console.log "\tConnecting ... '#{opts.host}'"
  console.log ""

  # init server
  remote.connect opts.host, opts.pathto, opts.debug

  #dispatch events occured during the program is not running
  #watch.ready ()->
  #  fs.readFile '.m3ddata', {encoding: 'utf-8'}, (err, data)->
  #    return if err
  #    fc.dispatchEvent watch, data


  watch opts.path,
    stable: opts.stable
  , (e)->
    #filter .swp files created by vim
    #console.log '\u001b[1;4;35m>>>>>>>>>>>>>>>>>>>\u001b[0m'
    console.log "[#{(new Date()).toTimeString().slice(0,8)}] Local: >>>\u001b[1;4m#{e.type}\u001b[0m [#{e.filename}]"
    if opts.debug
      console.log "   old:\t#{e.oid}"
      console.log "   new:\t#{e.nid || e.oid}"

    switch e.type
      when 'mkdir'
        remote.mkdir e.filename
      when 'change', 'create'
        remote.save e.filename, e.oid
        if (path.basename e.filename)[0...3] is 'jch'
          jch.parse(e.filename)
      when 'delete', 'rmdir'
        remote.delete e.filename, e.oid
      when 'mvfile', 'mvdir'
        remote.move e.oname, e.oid, e.filename
      else



  #save watch status for trigger change events next time
  process.on 'SIGINT', ()->
    #fs.writeFileSync '.m3ddata', watch.status()
    do process.exit



init = ()->
  # check if enter help mode
  params
    .option('-s, --stable', 'stable mode for supporting old nodejs(0.8) and OSX(10.7)')
    .option('-f, --force', 'force sync mode ignore without checking file\'s MD5')


    .option('-d, --debug', 'show more detailed debug info')
    .version('0.0.6')

    .parse(process.argv)

  start(params)


module.exports.run = init