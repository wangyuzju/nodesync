// Generated by CoffeeScript 1.6.3
(function() {
  var CONFIG, fc, fs, init, jch, path, program, remote, start, url, watch;

  fs = require('fs');

  url = require('url');

  path = require('path');

  watch = require("watch-project");

  jch = require("jch");

  program = require('commander');

  remote = require('./upload');

  fc = require('./filechange');

  CONFIG = require('./config');

  console.error = function(s) {
    return console.log("\u001b[1;31m" + s + "\u001b[0m");
  };

  console.info = function(s) {
    return console.log("\u001b[36m" + s + "\u001b[0m");
  };

  console.warn = function(s) {
    return console.log("\u001b[35m" + s + "\u001b[0m");
  };

  start = function(opt) {
    var DEBUG, target;
    target = path.resolve('.m3dsync_config');
    CONFIG = CONFIG.load(target);
    DEBUG = opt.debug || false;
    if (!CONFIG) {
      return;
    }
    if (!fs.existsSync(CONFIG.path)) {
      console.error("Error: ");
      console.log("\tWatching directory '" + CONFIG.path + "' is not Exist!");
      return;
    }
    console.log("Local : >>>");
    console.log("\tWatching   ... '" + CONFIG.path + "'");
    console.log("\tConnecting ... '" + CONFIG.host + "'");
    console.log("");
    remote.connect(CONFIG.host, CONFIG.pathto, DEBUG);
    watch(CONFIG.path, function(e) {
      console.log("[" + ((new Date()).toTimeString().slice(0, 8)) + "] Local: >>>\u001b[1;4m" + e.type + "\u001b[0m [" + e.filename + "]");
      if (DEBUG) {
        console.log("   old:\t" + e.oid);
        console.log("   new:\t" + (e.nid || e.oid));
      }
      switch (e.type) {
        case 'mkdir':
          return remote.mkdir(e.filename);
        case 'change':
        case 'create':
          remote.save(e.filename, e.oid);
          if ((path.basename(e.filename)).slice(0, 3) === 'jch') {
            return jch.parse(e.filename);
          }
          break;
        case 'delete':
        case 'rmdir':
          return remote["delete"](e.filename, e.oid);
        case 'mvfile':
        case 'mvdir':
          return remote.move(e.oname, e.oid, e.filename);
      }
    });
    return process.on('SIGINT', function() {
      return process.exit();
    });
  };

  init = function() {
    program.version('0.0.6').option('-f, --force', 'force code sync ignore without checking file\'s MD5').option('-d, --debug', 'show debug info').parse(process.argv);
    return start(program);
  };

  module.exports.run = init;

}).call(this);
