// Generated by CoffeeScript 1.6.3
(function() {
  var config, fc, fs, init, jch, params, path, remote, start, url, watch;

  fs = require('fs');

  url = require('url');

  path = require('path');

  watch = require("watch-project");

  jch = require("jch");

  params = require('commander');

  remote = require('./upload');

  fc = require('./filechange');

  config = require('./config');

  console.error = function(s) {
    return console.log("\u001b[1;31m" + s + "\u001b[0m");
  };

  console.info = function(s) {
    return console.log("\u001b[36m" + s + "\u001b[0m");
  };

  console.warn = function(s) {
    return console.log("\u001b[35m" + s + "\u001b[0m");
  };

  start = function(opts) {
    var conf, key, target, value;
    target = path.resolve('.m3dsync_config');
    conf = config.load(target);
    if (!conf) {
      return;
    }
    for (key in conf) {
      value = conf[key];
      if (opts[key] == null) {
        opts[key] = value;
      }
    }
    if (!fs.existsSync(opts.path)) {
      console.error("Error: ");
      console.log("\tWatching directory '" + opts.path + "' is not Exist!");
      return;
    }
    if (opts.stable) {
      console.warn("[Stable Mode Enable]");
    }
    console.log("Local : >>>");
    console.log("\tWatching   ... '" + opts.path + "'");
    console.log("\tConnecting ... '" + opts.host + "'");
    console.log("");
    remote.connect(opts.host, opts.pathto, opts.debug);
    watch(opts.path, {
      stable: opts.stable
    }, function(e) {
      console.log("[" + ((new Date()).toTimeString().slice(0, 8)) + "] Local: >>>\u001b[1;4m" + e.type + "\u001b[0m [" + e.filename + "]");
      if (opts.debug) {
        console.log("   old:\t" + e.oid);
        console.log("   new:\t" + (e.nid || e.oid));
      }
      switch (e.type) {
        case 'mkdir':
          return remote.mkdir(e.filename);
        case 'change':
        case 'create':
          remote.save(e.filename, e.oid);
          if ((path.basename(e.filename)).slice(0, 3) === 'jch') {
            return jch.parse(e.filename);
          }
          break;
        case 'delete':
        case 'rmdir':
          return remote["delete"](e.filename, e.oid);
        case 'mvfile':
        case 'mvdir':
          return remote.move(e.oname, e.oid, e.filename);
      }
    });
    return process.on('SIGINT', function() {
      return process.exit();
    });
  };

  init = function() {
    params.option('-s, --stable', 'stable mode for supporting old nodejs(0.8) and OSX(10.7)').option('-f, --force', 'force sync mode ignore without checking file\'s MD5').option('-d, --debug', 'show more detailed debug info').version('0.0.6').parse(process.argv);
    return start(params);
  };

  module.exports.run = init;

}).call(this);
