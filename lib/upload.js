// Generated by CoffeeScript 1.6.3
(function() {
  var FormData, fs, http, remote;

  http = require('http');

  fs = require('fs');

  FormData = require('form-data');

  remote = {
    connect: function(host, pathTo) {
      this.host = host;
      this.pathTo = pathTo;
      return this.post();
    },
    _prepareHTTP: function(headers) {
      var req, self;
      this.option.headers = headers;
      self = this;
      req = http.request(this.option);
      req.on('response', function(res) {
        if (!self.connected) {
          self.connected = true;
          console.info("Server: >>>\n\tSuccecc Connected!");
        } else {
          console.info("Server: >>>");
        }
        res.setEncoding('utf8');
        return res.on('data', function(chunk) {
          console.info("   " + res.statusCode + ":\t\u001b[1;36m" + chunk + "\u001b[0m");
          return console.log("");
        });
      });
      req.on('error', function(err) {
        console.error("" + err.code + " 无法连接 \"" + self.option.host + "\" ...");
        return console.error(err);
      });
      return req;
    },
    post: function(opts) {
      var form, key, self, value;
      self = this;
      form = new FormData();
      for (key in opts) {
        value = opts[key];
        if (value) {
          form.append(key, value);
        }
      }
      return form.submit(this.host, function(err, res) {
        if (err) {
          console.error("\t" + err);
          return;
        }
        if (!self.connected) {
          self.connected = true;
          console.info("Server: >>>\n\tSuccecc Connected!");
        } else {
          console.info("Server: >>>");
        }
        return res.on('data', function(chunk) {
          console.info("   " + res.statusCode + ":\t\u001b[1;36m" + chunk + "\u001b[0m");
          return console.log("");
        });
      });
    },
    _debugInfo: function(event, filepath) {
      console.log("  send:\t >>>>>>>>");
      console.log("\t      op: \u001b[1;4mchange\u001b[0m");
      console.log("\t  pathto: " + this.pathTo);
      console.log("\tfilepath: " + filepath);
      return console.log("");
    },
    save: function(fp, oid) {
      this._debugInfo('change', fp);
      return this.post({
        op: 'change',
        filepath: fp,
        md5: oid,
        to: this.pathTo,
        file: fs.createReadStream(fp)
      });
    },
    mkdir: function(dir) {
      return this.post({
        mkdir: dir
      });
    },
    "delete": function(fp, oid) {
      return this.post({
        oid: oid,
        del: fp
      });
    },
    move: function(fp, oid, nfp) {
      return this.post({
        mv: fp,
        oid: oid,
        to: nfp
      });
    }
  };

  module.exports = remote;

}).call(this);
