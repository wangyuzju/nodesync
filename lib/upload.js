// Generated by CoffeeScript 1.6.3
(function() {
  var DEBUG, FormData, fs, http, path, remote;

  http = require('http');

  fs = require('fs');

  path = require('path');

  FormData = require('form-data');

  DEBUG = false;

  remote = {
    connect: function(host, pathTo, force, debug) {
      DEBUG = debug;
      if (force) {
        this.force = true;
      } else {
        this.force = false;
      }
      this.host = host;
      this.pathTo = pathTo + "/";
      return this.post({
        op: "init"
      });
    },
    _debugInfo: function(opts) {
      var key, value;
      console.log("  send:\t >>>>>>>>");
      for (key in opts) {
        value = opts[key];
        console.log("\t " + key + ": \u001b[4m" + value + "\u001b[0m");
      }
      return console.log("");
    },
    post: function(opts) {
      var form, key, self, value;
      if (this.force) {
        opts.force = 'true';
      }
      if (DEBUG) {
        this._debugInfo(opts);
      }
      self = this;
      form = new FormData();
      for (key in opts) {
        value = opts[key];
        if (value) {
          form.append(key, value);
        }
      }
      return form.submit(this.host, function(err, res) {
        var logPrefix;
        if (err) {
          console.error("\t" + err);
          return;
        }
        if (DEBUG) {
          logPrefix = "[" + ((new Date()).toTimeString().slice(0, 8)) + "] Server: >>> \n\t";
        } else {
          logPrefix = "[" + ((new Date()).toTimeString().slice(0, 8)) + "] Server: >>>";
        }
        return res.on('data', function(chunk) {
          var data;
          data = JSON.parse(chunk);
          switch (data.code) {
            case 22001:
              return console.error("" + logPrefix + " " + data.msg);
            case 22000:
              return console.info("" + logPrefix + " " + data.msg);
            default:
              return console.log("\t ddd " + data.msg);
          }
        });
      });
    },
    save: function(fp, oid) {
      var file;
      file = fs.createReadStream(fp);
      if (path.sep === '\\') {
        fp = fp.replace(/\\/g, '/');
      }
      return this.post({
        op: 'change',
        to: this.pathTo,
        filepath: fp,
        md5: oid,
        file: file
      });
    },
    mkdir: function(dir) {
      if (path.sep === '\\') {
        dir = dir.replace(/\\/g, '/');
      }
      return this.post({
        op: 'mkdir',
        to: this.pathTo,
        filepath: dir
      });
    },
    "delete": function(fp, oid) {
      if (path.sep === '\\') {
        fp = fp.replace(/\\/g, '/');
      }
      return this.post({
        op: "del",
        to: this.pathTo,
        filepath: fp
      });
    },
    move: function(fp, oid, nfp) {
      if (path.sep === '\\') {
        fp = fp.replace(/\\/g, '/');
      }
      return this.post({
        op: 'mv',
        to: this.pathTo,
        filepath: fp,
        target: nfp,
        oid: oid
      });
    }
  };

  module.exports = remote;

}).call(this);
