// Generated by CoffeeScript 1.6.3
(function() {
  var DEBUG, FormData, fs, http, path, remote;

  http = require('http');

  fs = require('fs');

  path = require('path');

  FormData = require('form-data');

  DEBUG = false;

  remote = {
    connect: function(host, pathTo, debug) {
      DEBUG = debug;
      this.host = host;
      this.pathTo = path.resolve(pathTo) + "/";
      return this.post({
        op: "init"
      });
    },
    post: function(opts) {
      var form, key, self, value;
      self = this;
      form = new FormData();
      for (key in opts) {
        value = opts[key];
        if (value) {
          form.append(key, value);
        }
      }
      return form.submit(this.host, function(err, res) {
        var logPrefix;
        if (err) {
          console.error("\t" + err);
          return;
        }
        if (!self.connected) {
          self.connected = true;
          console.info("Server: >>> ");
        } else {
          if (DEBUG) {
            logPrefix = "[" + ((new Date()).toTimeString().slice(0, 8)) + "] Server: >>> \n\t";
          } else {
            logPrefix = "[" + ((new Date()).toTimeString().slice(0, 8)) + "] Server: >>>";
          }
        }
        return res.on('data', function(chunk) {
          var data;
          data = JSON.parse(chunk);
          switch (data.code) {
            case 22001:
              return console.error("" + logPrefix + " " + data.msg);
            case 22000:
              return console.info("" + logPrefix + " " + data.msg);
            default:
              return console.log("\t" + data.msg);
          }
        });
      });
    },
    _debugInfo: function(event, filepath) {
      console.log("  send:\t >>>>>>>>");
      console.log("\t      op: \u001b[1;4m" + event + "\u001b[0m");
      console.log("\t  pathto: " + this.pathTo);
      console.log("\tfilepath: " + filepath);
      return console.log("");
    },
    save: function(fp, oid) {
      if (DEBUG) {
        this._debugInfo('change', fp);
      }
      return this.post({
        op: 'change',
        to: this.pathTo,
        filepath: fp,
        md5: oid,
        file: fs.createReadStream(fp)
      });
    },
    mkdir: function(dir) {
      if (DEBUG) {
        this._debugInfo('mkdir', dir);
      }
      return this.post({
        op: 'mkdir',
        to: this.pathTo,
        filepath: dir
      });
    },
    "delete": function(fp, oid) {
      if (DEBUG) {
        this._debugInfo('del', fp);
      }
      return this.post({
        op: "del",
        to: this.pathTo,
        filepath: fp
      });
    },
    move: function(fp, oid, nfp) {
      if (DEBUG) {
        this._debugInfo('mv', "move " + fp + " to " + nfp);
      }
      return this.post({
        op: 'mv',
        to: this.pathTo,
        filepath: fp,
        target: nfp,
        oid: oid
      });
    }
  };

  module.exports = remote;

}).call(this);
